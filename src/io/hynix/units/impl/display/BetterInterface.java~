package io.hynix.units.impl.display;

import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.datafixers.util.Pair;
import io.hynix.HynixMain;
import io.hynix.events.impl.EventOverlayRender;
import io.hynix.managers.drag.Dragging;
import io.hynix.units.api.Category;
import io.hynix.units.api.Unit;
import io.hynix.units.api.UnitRegister;
import io.hynix.units.settings.impl.BooleanSetting;
import io.hynix.units.settings.impl.ModeListSetting;
import io.hynix.utils.johon0.render.render2d.RenderUtils;
import net.minecraft.client.settings.BooleanOption;
import net.minecraft.scoreboard.Score;
import net.minecraft.scoreboard.ScorePlayerTeam;
import net.minecraft.scoreboard.Scoreboard;
import net.minecraft.util.text.ITextComponent;
import net.minecraft.util.text.StringTextComponent;
import net.minecraft.util.text.TextFormatting;

import java.awt.*;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

@UnitRegister(name = "BetterInterface", category = Category.Display, desc = "Меняет стандартные элементы на улучшенные")
public class BetterGUI extends Unit {

    public static ModeListSetting modes = new ModeListSetting("Что изменять?",
            new BooleanSetting("Скорборд",true),
            new BooleanSetting("Хотбар",true),
            new BooleanSetting("Таб",true)
    );
    public static BooleanSetting smoothScreen = new BooleanSetting("Анимация гуишек",true);
    public BetterGUI(){
        addSettings(modes, smoothScreen);
    }

    public Dragging scoreboard = HynixMain.getInstance().createDrag(this,"Scoreboard",mc.getMainWindow().getScaledWidth()/2f,mc.getMainWindow().getScaledHeight()/2f);

    @Override
    public void onOverlay(EventOverlayRender e) {
        MatrixStack ms = new MatrixStack();
        float height = 0;
        if (e.getOverlayType() == EventOverlayRender.OverlayType.SCOREBOARD) {
            if (modes.get(0).getValue() && !HynixMain.getInstance().getModuleManager().getNoRender().element.get(3).getValue()) {
                e.isCancel();
                int l = 0;
                Scoreboard scr = e.scoreObjective.getScoreboard();
                Collection<Score> collection = scr.getSortedScores(e.scoreObjective);
                List<Score> list = collection.stream().filter((p_lambda$renderScoreboard$1_0_) ->
                {
                    return p_lambda$renderScoreboard$1_0_.getPlayerName() != null && !p_lambda$renderScoreboard$1_0_.getPlayerName().startsWith("#");
                }).collect(Collectors.toList());

                if (list.size() > 15) {
                    collection = Lists.newArrayList(Iterables.skip(list, collection.size() - 15));
                } else {
                    collection = list;
                }

                List<Pair<Score, ITextComponent>> list1 = Lists.newArrayListWithCapacity(collection.size());
                ITextComponent itextcomponent = e.scoreObjective.getDisplayName();
                int i = mc.fontRenderer.getStringPropertyWidth(itextcomponent);
                int j = i;
                int k = mc.fontRenderer.getStringWidth(": ");
                for (Score score : collection) {
                    ScorePlayerTeam scoreplayerteam = scr.getPlayersTeam(score.getPlayerName());
                    ITextComponent itextcomponent1 = ScorePlayerTeam.getTitle(scoreplayerteam, new StringTextComponent(score.getPlayerName()));
                    list1.add(Pair.of(score, itextcomponent1));
                    j = Math.max(j, mc.fontRenderer.getStringPropertyWidth(itextcomponent1) + k + mc.fontRenderer.getStringWidth(Integer.toString(score.getScorePoints())));
                }
                Collections.reverse(list1);

                for (Pair<Score, ITextComponent> pair : list1) {
                    height += 2 + mc.fontRenderer.FONT_HEIGHT;
                }

                RenderUtils.drawRoundedRect((float) ((float) scoreboard.getX() / (mc.getMainWindow().getGuiScaleFactor() / 2f)), (float) ((float) (scoreboard.getY() / (mc.getMainWindow().getGuiScaleFactor() / 2))), (float) (scoreboard.getWidth() / (mc.getMainWindow().getGuiScaleFactor() / 2)), height, 3, new Color(10, 10, 10, 200).getRGB());
//                RenderUtil.Render2D.drawRoundedRect((float) ((float) scoreboard.getX()/(mc.getMainWindow().getGuiScaleFactor()/2f)), (float) ((float) (scoreboard.getY()/(mc.getMainWindow().getGuiScaleFactor()/2))),scoreboard.getWidth(),scoreboard.getHeight(),3, RenderUtil.reAlphaInt(Window.backColor,100));
                scoreboard.setHeight((float) (height * (mc.getMainWindow().getGuiScaleFactor() / 2f)));


                mc.fontRenderer.func_243248_b(ms, itextcomponent, (float) ((float) scoreboard.getX() / (mc.getMainWindow().getGuiScaleFactor() / 2f)) + 2, (float) ((float) scoreboard.getY() / (mc.getMainWindow().getGuiScaleFactor() / 2f)) + 2, -1);
                for (Pair<Score, ITextComponent> pair : list1) {
                    ++l;
                    Score score1 = pair.getFirst();
                    ITextComponent itextcomponent2 = pair.getSecond();
                    String s = TextFormatting.RED + "" + score1.getScorePoints();

                    mc.fontRenderer.func_243248_b(ms, itextcomponent2, (float) ((float) scoreboard.getX() / (mc.getMainWindow().getGuiScaleFactor() / 2f)), (float) ((float) l * 10 + (scoreboard.getY() / (mc.getMainWindow().getGuiScaleFactor() / 2))), -1);

//                    ClientUtil.sendMesage(scoreboard.getWidth()+" "+(mc.fontRenderer.getStringPropertyWidth(itextcomponent2)*(mc.getMainWindow().getGuiScaleFactor()/2f)));

                    if ((mc.fontRenderer.getStringPropertyWidth(itextcomponent2) * (mc.getMainWindow().getGuiScaleFactor() / 2f)) + 10 > scoreboard.getWidth()) {
                        scoreboard.setWidth((float) Math.max(scoreboard.getWidth(), (mc.fontRenderer.getStringPropertyWidth(itextcomponent2) * (mc.getMainWindow().getGuiScaleFactor() / 2f))) + 10);
                    }
                }
            }
//                scoreboard.setWidth((float) (100*(mc.getMainWindow().getGuiScaleFactor()/2)));
        }
    }
}
