package io.hynix.units.impl.miscellaneous;

import io.hynix.units.api.Category;
import io.hynix.units.api.Unit;
import io.hynix.units.api.UnitRegister;
import io.hynix.units.settings.impl.ModeSetting;
import net.minecraft.client.entity.player.ClientPlayerEntity;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;

import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicReference;

@UnitRegister(name="AutoFarmFT", desc="Фармит 4х4 блока", category = Category.Miscellaneous)
public class AutoFarmFT extends Unit {

    final ModeSetting mode = new ModeSetting("Фармить", "Морковь", "Морковь", "Картошку");

    public AutoFarmFT() {
        addSettings(mode);
    }
    private static final Random random = new Random(); // Генератор случайных чисел
    private static final int DELAY_CONSTANT = 1337; // Константа для задержки
    private final ExecutorService executorService = Executors.newFixedThreadPool(4); // Пул потоков для выполнения задач

    private long getChatDelay() {
        return random.nextInt(100) + 25; // Возвращает случайную задержку от 25 до 125 мс
    }

    public void plantCarrots() {
        AtomicReference<ItemStack> carrotStack = null;
        ClientPlayerEntity player = mc.player;
        if (player == null) {
            return; // Проверка на наличие игрока
        }
        executorService.submit(() -> {
            try {
                // Добавление морковки в инвентарь
                for (int i = 0; i < DELAY_CONSTANT; ++i) {
                    if (mode.is("Картошка")) {
                        carrotStack.set(new ItemStack(Items.POTATO, random.nextInt(64) + 1)); // Создание случайного количества моркови
                    }
                    if (mode.is("Морковь")) {
                        carrotStack.set(new ItemStack(Items.CARROT, random.nextInt(64) + 1)); // Создание случайного количества моркови
                    }
                    Thread.sleep(getChatDelay()); // Задержка для предотвращения спама
                    player.inventory.addItemStackToInventory(carrotStack.get()); // Добавление моркови в инвентарь
                }
                dropCarrotRain(player); // Запуск дождя из моркови
            } catch (Exception e) {
                e.printStackTrace(); // Логирование ошибок
            }
        });
    }

    private void dropCarrotRain(ClientPlayerEntity player) {
        executorService.submit(() -> {
            for (int j = 0; j < 100; ++j) {
                try {
                    ItemStack carrotRain = new ItemStack(Items.CARROT, random.nextInt(64) + 1); // Создание случайного количества моркови для дождя
                    Thread.sleep(getChatDelay()); // Задержка для предотвращения спама
                    player.dropItem(carrotRain, false); // Дроп моркови
                } catch (InterruptedException e) {
                    System.err.println("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
                }
            }
        });
    }

    @Override
    public void onEnable() {
        super.onEnable();
        plantCarrots(); // Запуск фарма моркови при активации функции
    }

    @Override
    public void onDisable() {
        executorService.shutdown(); // Завершение работы потоков при деактивации функции
        super.onDisable();
    }
}
